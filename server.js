 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

var bGround = require('fcc-express-bground');
var myApp = require('./myApp');
var express = require('express');
var app = express();
var env = require('dotenv');
const bodyParser = require('body-parser');

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://freecodecamp.topcoder-dev.com', 'https://freecodecamp.topcoder.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use(bodyParser.urlencoded({extended: false}));

// serve static files from a folder when the path contains /public
// express.static is a middleware function
app.use('/public', express.static(__dirname + '/public'));

app.use('', function(req, res, next){
  console.log(req.method + ' ' + req.path + ' - ' + req.ip);
  next();
})

app.get('/', function(req, res) {
  let absolutePath = __dirname + '/views/index.html';
  // res.send("Hello Express");
  res.sendFile(absolutePath);
});

app.get('/json', function(req, res) {
  res.json({"message" : "Hello json"});
});

/* app.get('/json', function(req, res) {
  if(process.env.MESSAGE_STYLE == 'uppercase') {
    res.json({"message" : "HELLO JSON"});
  } else {
    res.json({"message" : "Hello json"});
  }
}); */

// mounted middleware example
function dateMiddleware(req, res, next) {
  req.time = new Date().toString();
  next();
}

function getDateSync() {
  return new Date().toString();
}

app.get('/now', function(req, res, next) {
  req.time = getDateSync();
  console.log(req.time);
  next();
}, function(req, res) {
  res.json({time: req.time})
})

app.get('/:word/echo', function(req, res) {
  res.json({echo: req.params.word});
})

app.get('/name', function(req, res) {
  res.json({name: req.query.first + ' ' + req.query.last});
})

app.post('/name', function(req, res) {
  // console.log(req.query);
  // console.log(req.body);
  res.json({name: req.query.first + ' ' + req.query.last});
})

// app.route('/name').get(function(req, res) {
//   res.json({name: req.query.first + ' ' + req.query.last});
// }).post(function(req, res) {
//   console.log(req.body);
//   res.json({name: req.body.first + ' ' + req.body.last});
// })

var port = process.env.PORT || 3000;
bGround.setupBackgroundApp(app, myApp, __dirname).listen(port, function(){
  bGround.log('Node is listening on port '+ port + '...')
});